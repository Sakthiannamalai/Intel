CREATE OR REPLACE PROCEDURE BUILD_SIM_BOM.BMATHUB_BASE.P_MASTER_ROOT_MAINTAIN()
RETURNS STRING 
LANGUAGE SQL
AS 
$$
  BEGIN
     MERGE INTO BUILD_SIM_BOM.BMATHUB_BASE.T_ITEM_DETAIL_ROOT AS ITEM_DETAIL_ROOT
     USING BUILD_SIM_BOM.MASTER_DATA.ITEM AS ITEM ON ITEM_DETAIL_ROOT.ITEM_ID = ITEM.ITEM_ID
       WHEN MATCHED THEN 
         UPDATE SET ITEM_DETAIL_ROOT.ITEM_CLASS_NM = ITEM.ITEM_CLASS_NM,
                    ITEM_DETAIL_ROOT.ITEM_DSC = ITEM.ITEM_DSC,
                    ITEM_DETAIL_ROOT.DELETE_IND = ITEM.DELETE_IND    
       WHEN NOT MATCHED THEN
          INSERT (ITEM_ID, ITEM_CLASS_NM, ITEM_DSC, DELETE_IND)
          VALUES (ITEM.ITEM_ID, ITEM.ITEM_CLASS_NM, ITEM.ITEM_DSC, ITEM.DELETE_IND);

    MERGE INTO BUILD_SIM_BOM.BMATHUB_BASE.T_LOCATION_ROOT AS LOCATION_ROOT
     USING BUILD_SIM_BOM.MASTER_DATA.LOCATION AS LOCATION ON LOCATION_ROOT.ITEM_ID = LOCATION.ITEM_ID
       WHEN MATCHED THEN 
         UPDATE SET LOCATION_ROOT.ITEM_CLASS_NM = LOCATION.ITEM_CLASS_NM,
                    LOCATION_ROOT.LOCATION_ID = LOCATION.LOCATION_ID
       WHEN NOT MATCHED THEN
          INSERT (ITEM_ID, ITEM_CLASS_NM, LOCATION_ID)
          VALUES (LOCATION.ITEM_ID, LOCATION.ITEM_CLASS_NM, LOCATION.LOCATION_ID);     

     MERGE INTO BUILD_SIM_BOM.BMATHUB_BASE.T_ORIG_BOM AS ORIG_BOM
     USING BUILD_SIM_BOM.MASTER_DATA.ORIG_BOM AS BOM ON ORIG_BOM.INPUT_ITEM_ID = BOM.INPUT_ITEM_ID
       WHEN MATCHED THEN 
         UPDATE SET ORIG_BOM.ITEM_CLASS_NM = BOM.ITEM_CLASS_NM,
                    ORIG_BOM.OUTPUT_ITEM_ID = BOM.OUTPUT_ITEM_ID,
                    ORIG_BOM.LOC = BOM.LOC
       WHEN NOT MATCHED THEN
          INSERT (INPUT_ITEM_ID, ITEM_CLASS_NM, OUTPUT_ITEM_ID, LOC)
          VALUES (BOM.INPUT_ITEM_ID, BOM.ITEM_CLASS_NM, BOM.OUTPUT_ITEM_ID, BOM.LOC);            
    RETURN 'DATA LOADED SUCCESSFULLY';
  END;
$$;

CALL BUILD_SIM_BOM.BMATHUB_BASE.P_MASTER_ROOT_MAINTAIN();