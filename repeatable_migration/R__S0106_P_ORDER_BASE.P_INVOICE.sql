CREATE OR REPLACE PROCEDURE P_INVOICE_GENERATE()
RETURNS TABLE (
  ORDER_ID VARCHAR(10),
  ORDER_DATE DATE,
  INVOICE_DATE DATE,
  TAX_AMOUNT NUMBER(10,2),
  TOTAL_AMOUNT NUMBER(12,2),
  DISCOUNT NUMBER(10,2),
  FINAL_INVOICE_AMT NUMBER(12,2),
  CUSTOMER_ID VARCHAR(10),
  CREATE_DATE DATE,
  CREATE_USER VARCHAR(10)
)
LANGUAGE SQL
AS
$$
DECLARE
  invoice RESULTSET;
BEGIN
   UPDATE T_SALES_ORDER_DETAIL SET TOTAL_AMOUNT = QTY * PRICE;

   UPDATE T_CUSTOMER SET TOTAL_ORDERS = (SELECT COUNT(*) FROM T_SALES_ORDER_DETAIL WHERE 
   T_SALES_ORDER_DETAIL.CUSTOMER_ID = T_CUSTOMER.CUSTOMER_ID);

   UPDATE T_SALES_ORDER_HEADER SET ITEM_COUNT = (SELECT COUNT(*) FROM T_SALES_ORDER_DETAIL
   WHERE T_SALES_ORDER_HEADER.CUSTOMER_ID = T_SALES_ORDER_DETAIL.CUSTOMER_ID);

   UPDATE T_SALES_ORDER_HEADER orderHeader SET TOTAL_AMOUNT = (SELECT SUM(orderDetail.TOTAL_AMOUNT) 
   FROM T_SALES_ORDER_DETAIL AS orderDetail WHERE orderDetail.CUSTOMER_ID = orderHeader.CUSTOMER_ID);

   UPDATE T_SALES_ORDER_HEADER SET DISCOUNT = 
   CASE
    WHEN COUPON_CODE IS NOT NULL AND customer.CATEGORY = 'Regular' THEN
      CASE
        WHEN COUPON_CODE = 'Coupon_X' THEN TOTAL_AMOUNT * 0.03
        WHEN COUPON_CODE = 'Coupon_Y' THEN TOTAL_AMOUNT * 0.02
        WHEN COUPON_CODE = 'Coupon_Z' THEN TOTAL_AMOUNT * 0.01
        ELSE 0
      END
    WHEN customer.CATEGORY = 'Gold' THEN 
      TOTAL_AMOUNT * 0.05
    WHEN customer.CATEGORY = 'Silver' THEN
      TOTAL_AMOUNT * 0.03
    WHEN customer.CATEGORY = 'Bronze' THEN
      TOTAL_AMOUNT * 0.01
    ELSE 0
   END
   FROM T_CUSTOMER AS customer
   WHERE T_SALES_ORDER_HEADER.CUSTOMER_ID = customer.CUSTOMER_ID;

   TRUNCATE TABLE T_INVOICE;

   INSERT INTO T_INVOICE (ORDER_ID, ORDER_DATE, INVOICE_DATE, TAX_AMOUNT, TOTAL_AMOUNT, DISCOUNT, 
   FINAL_INVOICE_AMT, CUSTOMER_ID, CREATE_DATE, CREATE_USER) 
    SELECT 
     orderHeader.ORDER_ID,
     orderHeader.ORDER_DATE,
     CURRENT_DATE,  
     (orderHeader.TOTAL_AMOUNT * 0.09),
     orderHeader.TOTAL_AMOUNT,
     orderHeader.DISCOUNT,
     (orderHeader.TOTAL_AMOUNT + (orderHeader.TOTAL_AMOUNT * 0.09) - orderHeader.DISCOUNT),
     orderHeader.CUSTOMER_ID,
     CURRENT_DATE, 
     'SYSTEM'
    FROM T_SALES_ORDER_HEADER AS orderHeader JOIN  T_CUSTOMER AS CUSTOMER 
    ON orderHeader.CUSTOMER_ID = customer.CUSTOMER_ID WHERE orderHeader.ORDER_DATE > CURRENT_DATE AND 
    customer.STATUS = 'ACTIVE';

    UPDATE T_CUSTOMER SET TOTAL_INVOICE_AMOUNT = (SELECT SUM(T_INVOICE.FINAL_INVOICE_AMT) 
    FROM T_INVOICE WHERE T_INVOICE.CUSTOMER_ID = T_CUSTOMER.CUSTOMER_ID);
    
    UPDATE T_CUSTOMER AS customer SET LOYALTY_POINTS = 
    CASE
       WHEN customer.TOTAL_INVOICE_AMOUNT > 1000  THEN 
          customer.LOYALTY_POINTS + promotion.PROMOTION_VALUE
        ELSE 0
    END
    FROM T_PROMOTION AS promotion WHERE customer.CATEGORY = promotion.CUSTOMER_CATEGORY AND  
    promotion.PROMOTION_TYPE = 'Loyalty';
    
    invoice := (SELECT ORDER_ID, ORDER_DATE, INVOICE_DATE, TAX_AMOUNT, TOTAL_AMOUNT, DISCOUNT, 
                FINAL_INVOICE_AMT, CUSTOMER_ID, CREATE_DATE, CREATE_USER FROM T_INVOICE);
                
   RETURN TABLE(invoice);
END;
$$